@model ProjectManager.Application.ProjectTask.ProjectTaskDto
@using Microsoft.AspNetCore.Identity
@inject UserManager<ProjectManager.Domain.Entities.User> UserManager

@{
    ViewData["Title"] = "Task Details";
    var projectEncodedName = ViewData["ProjectEncodedName"]?.ToString() ?? string.Empty;
    bool isEditable = ViewData["IsEditable"] as bool? ?? false;
    var user = await UserManager.GetUserAsync(User);
    bool isAdmin = await UserManager.IsInRoleAsync(user, "Admin");
    var userEmail = user?.Email;
}

<div class="container mt-5">
    <div class="card shadow-lg border-0">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0 d-flex justify-content-between align-items-center">
                <span>@Model.Name</span>
                <span class="badge bg-light text-dark">@Model.TaskProgressStatus</span>
            </h3>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <h5 class="card-title">Assigned User</h5>
                <p class="card-text">@(!string.IsNullOrEmpty(Model.AssignedUserEmail) ? Model.AssignedUserEmail : "Unassigned")</p>
            </div>
            <div class="mb-3">
                <h5 class="card-title">Description</h5>
                <p style="white-space: pre-wrap;" class="card-text">@(!string.IsNullOrWhiteSpace(Model.Description) ? Model.Description : "No description provided")</p>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <h5 class="card-title">Deadline</h5>
                    <p class="card-text">@Model.Deadline.ToString("dd-MM-yyyy HH:mm")</p>
                </div>
                <div class="col-md-6">
                    <h5 class="card-title">Assignment Time</h5>
                    <p class="card-text">@Model.AssignmentTime.ToString("dd-MM-yyyy HH:mm")</p>
                </div>
            </div>
        </div>
        <div class="card-footer d-flex justify-content-between">
            @if (isEditable)
            {
                <a asp-controller="ProjectTask" asp-action="EditProjectTask" asp-route-taskId="@Model.Id" asp-route-projectEncodedName="@projectEncodedName" asp-route-isEditable="@isEditable" class="btn btn-primary">
                    <i class="bi bi-pencil"></i> Edit
                </a>
            }
            <a asp-action="Tasks" asp-controller="Project" asp-route-projectEncodedName="@projectEncodedName" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Back to Tasks
            </a>
        </div>
    </div>

    <div class="card mt-4">
        <div id="comments" class="card-body">
            <h5 class="mb-3">Comments</h5>
            <ul class="list-group">
                @foreach (var comment in Model.TaskComments.OrderByDescending(c => c.CommentTime))
                {
                    <li class="list-group-item d-flex justify-content-between align-items-start">
                        <div>
                            <strong>@comment.CreatedBy.Email</strong>
                            <span class="text-muted">(@comment.CommentTime.ToString("dd-MM-yyyy HH:mm"))</span>
                            <p class="mb-0">@comment.Comment</p>
                        </div>
                        @if (comment.CreatedBy.Email == userEmail || isAdmin)
                        {
                            <button class="btn btn-outline-danger btn-sm ms-3 delete-comment-button" data-commentId="@comment.Id">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        }
                    </li>
                }
            </ul>

            <form id="addCommentForm" class="mt-3">
                    <div id="newComment" class="form-group">
                        <label for="newComment">Add a Comment</label>
                        <textarea id="newComment" name="Comment" class="form-control" rows="3" required></textarea>
                    </div>
                    <input type="hidden" name="TaskId" value="@Model.Id" />
                    <input type="hidden" name="UserId" value="@user?.Id" />
                    <input type="submit" class="btn btn-primary mt-2 submit-new-comment" value="Submit">
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/Project/CommentManagment.js"></script>
    <script>
        const projectEncodedName = "@projectEncodedName";
        const taskId = @Model.Id;
        const isEditable = "@isEditable";
    </script>
}