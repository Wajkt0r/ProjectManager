﻿@using Microsoft.AspNetCore.Identity
@using ProjectManager.Domain.Entities
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@{
    var action = ViewContext.RouteData.Values["Action"]?.ToString();
    var controller = ViewContext.RouteData.Values["Controller"]?.ToString();
}

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            @{
                var user = await UserManager.GetUserAsync(User);
                var roles = await UserManager.GetRolesAsync(user);
            }
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity?.Name [@string.Join(", ", roles)]</a>
        </li>
        <li class="nav-item">
            @if (User.IsInRole("Admin"))
            {
                <b><a class="nav-link text-dark @(controller == "User" && action == "Index" ? "active" : "")" asp-area="" asp-controller="User" asp-action="Index">Users</a></b>
            }
        </li>
        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
